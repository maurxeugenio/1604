{"version":3,"sources":["pages/Index.js","pages/Services.js","pages/Contact.js","pages/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Index","className","href","Services","id","xs","sm","m","size","useState","copied","setCopied","target","text","onCopy","Footer","App","Contact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OAsBeA,MAjBf,WACE,OACE,yBAAKC,UAAU,UACX,wBAAIA,UAAU,SAAd,KACI,6BACF,qCAEF,wBAAIA,UAAU,cAAd,iBAGA,uBAAGC,KAAK,eAAeD,UAAU,OAAjC,oB,sBC0COE,MAlDf,WACI,OACI,yBAAKC,GAAG,cAAcH,UAAU,WAChC,kBAAC,YAAD,CAAWA,UAAU,aACrB,wBAAIA,UAAU,YAAd,wBAEA,kBAAC,MAAD,CAAKA,UAAU,YACf,kBAAC,MAAD,CAAKI,GAAI,GAAIC,GAAI,EAAGC,EAAG,GACnB,yBAAKN,UAAU,QACX,kBAAC,IAAD,CAAQO,KAAK,SACb,sCAGR,kBAAC,MAAD,CAAKH,GAAI,GAAIC,GAAI,EAAGC,EAAG,GACnB,yBAAKN,UAAU,QACX,kBAAC,IAAD,CAAgBO,KAAK,SACrB,4CAGR,kBAAC,MAAD,CAAKH,GAAI,GAAIC,GAAI,EAAGC,EAAG,GACnB,yBAAKN,UAAU,QACX,kBAAC,IAAD,CAAaO,KAAK,SAClB,yCAGR,kBAAC,MAAD,CAAKH,GAAI,GAAIC,GAAI,EAAGC,EAAG,GACnB,yBAAKN,UAAU,QACX,kBAAC,IAAD,CAAwBO,KAAK,SAC7B,8CAGR,kBAAC,MAAD,CAAKH,GAAI,GAAIC,GAAI,EAAGC,EAAG,GACnB,yBAAKN,UAAU,QACX,kBAAC,IAAD,CAAOO,KAAK,SACZ,+CAGR,kBAAC,MAAD,CAAKH,GAAI,GAAIC,GAAI,EAAGC,EAAG,GACnB,yBAAKN,UAAU,QACX,kBAAC,IAAD,CAAeO,KAAK,SACpB,+D,gBCTDL,MAjCf,WAAqB,IAAD,EACYM,oBAAS,GADrB,mBACTC,EADS,KACDC,EADC,KAGhB,OACI,yBAAKV,UAAU,WACZ,kBAAC,YAAD,KACK,wBAAIA,UAAU,YAAd,oBACA,kBAAC,MAAD,KACI,kBAAC,MAAD,KACI,wBAAIA,UAAU,gBACV,4BACI,wCACA,uBAAGC,KAAK,2BAA2BU,OAAO,UAA1C,WAEJ,4BACI,yCACA,uBAAGV,KAAK,gCAAgCU,OAAO,UAA/C,WAEJ,4BACI,+CACA,kBAAC,kBAAD,CAAiBC,KAAM,kBACnBC,OAAQ,kBAAMH,GAAU,KACxB,8BAAQD,EAAS,SAAU,mBCNhDK,MAhBf,WACI,OACI,yBAAKd,UAAU,UACX,wBAAIA,UAAU,SAAd,KACM,6BACF,qCAGJ,mFCKGe,MAXf,WACE,OACE,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAACC,EAAD,MACA,kBAAC,EAAD,QCDYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9c95aef7.chunk.js","sourcesContent":["import React from 'react';\nimport { Container, Row, Col } from 'react-grid-system';\n\n\n\nfunction Index() {\n  return (\n    <div className=\"header\">\n        <h1 className=\"brand\">\n          16<br/>\n          <span>04</span>\n        </h1>\n        <h2 className=\"brand-text\">\n          intelligence.\n        </h2>\n        <a href=\"#our-digital\" className=\"btn\">\n          be intelligent\n        </a>\n    </div>\n  );\n}\n\nexport default Index;\n","import React from 'react';\nimport { Container, Row, Col } from 'react-grid-system';\nimport { FaCode, FaHandsHelping } from 'react-icons/fa';\nimport { GiComputing, GiThreePointedShuriken, GiSpeedometer } from 'react-icons/gi';\nimport { MdWeb } from 'react-icons/md';\n\n\nfunction Services() {\n    return (\n        <div id=\"our-digital\" className=\"section\">\n        <Container className=\"container\">\n        <h1 className=\"headline\">our digital services</h1>\n\n        <Row className=\"row-list\">\n        <Col xs={12} sm={6} m={6} >\n            <div className=\"item\">\n                <FaCode size=\"40px\" />\n                <h4>code</h4>\n            </div>\n        </Col>\n        <Col xs={12} sm={6} m={6} >\n            <div className=\"item\">\n                <FaHandsHelping size=\"40px\" />\n                <h4>consulting</h4>\n            </div>\n        </Col>\n        <Col xs={12} sm={6} m={6}>\n            <div className=\"item\">\n                <GiComputing size=\"40px\" />\n                <h4>systems</h4>\n            </div>\n        </Col>\n        <Col xs={12} sm={6} m={6}>\n            <div className=\"item\">\n                <GiThreePointedShuriken size=\"40px\" />\n                <h4>integrations</h4>\n            </div>\n        </Col>\n        <Col xs={12} sm={6} m={6}>\n            <div className=\"item\">\n                <MdWeb size=\"40px\" />\n                <h4>blogs & sites</h4>\n            </div>\n        </Col>\n        <Col xs={12} sm={6} m={6}>\n            <div className=\"item\">\n                <GiSpeedometer size=\"40px\" />\n                <h4>performance & maintenance</h4>\n            </div>\n        </Col>\n        </Row>\n\n        </Container>\n        </div>\n    );\n}\n\nexport default Services;\n","import React, { useState }  from 'react'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport { Container, Row, Col } from 'react-grid-system'\n\n\nfunction Services() {\n    const [copied, setCopied] = useState(false) \n\n    return (\n        <div className=\"contact\">\n           <Container>\n                <h1 className=\"headline\">enter in contact</h1>\n                <Col>\n                    <Row>\n                        <ul className=\"list-contact\">\n                            <li>\n                                <h4>telegram</h4>\n                                <a href=\"https://t.me/eugenio1604\" target=\"_blank\">access</a>\n                            </li>\n                            <li>\n                                <h4>instagram</h4>\n                                <a href=\"https://instagram.com/1604.in\" target=\"_blank\">access</a>\n                            </li>\n                            <li>\n                                <h4>eugenio@1604.in</h4>\n                                <CopyToClipboard text={'eugenio@1604.in'}\n                                    onCopy={() => setCopied(true)}>\n                                    <span>{ copied ? 'copied': 'copy it'}</span>\n                                </CopyToClipboard>\n                            </li>\n                        </ul>\n                    </Row>\n                </Col>\n           </Container>\n        </div>\n    );\n}\n\nexport default Services;\n","import React from 'react';\nimport { Container, Row, Col } from 'react-grid-system';\n\n\n\nfunction Footer() {\n    return (\n        <div className=\"footer\">\n            <h1 className=\"brand\">\n                16<br />\n                <span>04</span>\n            </h1>\n\n            <h3>\n                all copyrights reserved - 1604 intelligence, 2020\n            </h3>\n\n        </div>\n    );\n}\n\nexport default Footer;\n","import './App.css'\nimport React from 'react';\nimport Header from './pages/Index'\nimport Services from './pages/Services'\nimport Contact from './pages/Contact'\nimport Footer from './pages/Footer'\n\nfunction App() {\n  return (\n    <div>\n        <Header />\n        <Services />\n        <Contact />\n        <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}